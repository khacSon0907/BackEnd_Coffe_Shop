package com.example.coffe_shop.auth.service;

import com.example.coffe_shop.auth.dto.LoginRequest;
import com.example.coffe_shop.auth.dto.RegisterRequest;
import com.example.coffe_shop.auth.model.User;
import com.example.coffe_shop.auth.repository.UserRepository;
import com.example.coffe_shop.response.ResponseMessage;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final PasswordEncoder passwordEncoder;
    private final UserRepository userRepository;


    // ƒëƒÉng k√Ω t·∫°o t√†i kho·∫£n user
    public ResponseMessage<User> register(RegisterRequest request) {
        if (userRepository.findByEmail(request.getEmail()).isPresent()) {
            return new ResponseMessage<>(false, "Email ƒë√£ t·ªìn t·∫°i!", null);
        }
        User user = User.builder()
                .email(request.getEmail())
                .password(passwordEncoder.encode(request.getPassword())) // üëà m√£ h√≥a t·∫°i ƒë√¢y
                .fullname(request.getFullname())
                .phoneNumber(request.getPhoneNumber())
                .build();
        User saved = userRepository.save(user);
        return new ResponseMessage<>(true, "ƒêƒÉng k√Ω th√†nh c√¥ng!", saved);
    }


    public ResponseMessage<User> login(LoginRequest request) {
        Optional<User> optional = userRepository.findByEmail(request.getEmail());

        if (optional.isEmpty()) {
            return new ResponseMessage<>(false, "Email kh√¥ng t·ªìn t·∫°i", null);
        }

        User user = optional.get();
        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            return new ResponseMessage<>(false, "Sai m·∫≠t kh·∫©u", null);
        }



        user.setPassword(null); // ·∫®n password
        return new ResponseMessage<>(true, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", user);
    }
}
